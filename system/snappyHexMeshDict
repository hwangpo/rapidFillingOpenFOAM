/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true; // "LEGO" mesh
snap            true; // real mesh
addLayers       true; // layers, we will not use this in this tutorial


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface

geometry
{
    tankTop.stl// name of the stl file
    {
        type triSurfaceMesh;
        name tankTop;// name we will use in this dictionary
    }
    tankLeftWall.stl
    {
        type triSurfaceMesh;
        name tankLeftWall;
    }
    tankRightWall.stl
    {
        type triSurfaceMesh;
        name tankRightWall;
    }
    tankFrontWall.stl
    {
        type triSurfaceMesh;
        name tankFrontWall;
    }
    tankBackWall.stl
    {
        type triSurfaceMesh;
        name tankBackWall;
    }
    tankBottomWall.stl
    {
        type triSurfaceMesh;
        name tankBottomWall;
    }
    pipeRight.stl
    {
        type triSurfaceMesh;
        name pipeRight;
    }
    pipeWall.stl
    {
        type triSurfaceMesh;
        name pipeWall;
    }
	/*
	We can also define geometrical entities that can be used to refine the mesh, 
	create regions, or generate baffles.
	*/
	// for air phase
	refinementBox1
	{
	    type searchableBox; 
	    min (1.0 -0.06 -0.06); 
	    max (1.6  0.06  0.06);
	}
	// for water in pipe
	refinementBox2
	{
	    type searchableBox; 
	    min (-0.2 -0.06 -0.06); 
	    max (1.0  0.06  0.06);
	}
	// for water surface
	refinementBox3
	{
	    type searchableBox; 
	    min (-0.6 0.48 -0.6); 
	    max (0.1  0.52  0.6);
	}
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000;// for parallel meshing

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 2000000;// maximum number of cells - guiding value, can be exceeded

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;
	
	maxLoadUnbalance 0.10;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;// number of cells between refinement levels

    //Local curvature and //feature angle refinement 
	resolveFeatureAngle 10; // 5
	
	planarAngle 30;
	
    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
	allowFreeStandingZoneFaces true;
	

    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file "tankTop.eMesh";
            level 0;// refinement defined by features
        }
        {
            file "tankLeftWall.eMesh";
            level 0;
        }
        {
            file "tankRightWall.eMesh";
            level 0;
        }
        {
            file "tankFrontWall.eMesh";
            level 0;
        }
        {
            file "tankBackWall.eMesh";
            level 0;
        }
        {
            file "tankBottomWall.eMesh";
            level 0;
        }
        {
            file "pipeRight.eMesh";
            level 0;
        }
        {
            file "pipeWall.eMesh";
            level 2;
        }

    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        tankTop
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        tankLeftWall
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        tankRightWall
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        tankFrontWall
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        tankBackWall
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        tankBottomWall
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        pipeRight
        {
            // Surface-wise min and max refinement level
            level (0 0);// refinement defined by surfaces - i.e. stl surfaces
        }
        pipeWall
        {
            // Surface-wise min and max refinement level
            level (2 4);// refinement defined by surfaces - i.e. stl surfaces
        }
    }

    //resolveFeatureAngle 30;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
	    // here we could additionally refine the mesh
		refinementBox1
		{
			mode   inside;
			levels ((1e5 2)); 
			// the first number is the distance from the surface,
			// A large value covers the whole region;
			// the second represents the refinement level;
		}
		
		refinementBox2
		{
			mode   inside;
			levels ((1e5 1)); 
			// the first number is the distance from the surface,
			// A large value covers the whole region;
			// the second represents the refinement level;
		}

		refinementBox3
		{
			mode   inside;
			levels ((1e5 2)); 
			// the first number is the distance from the surface,
			// A large value covers the whole region;
			// the second represents the refinement level;
		}
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    // This is an outside point locationInMesh (-0.033 -0.033 0.0033);
    locationInMesh (0 0 0); // point inside our geometry

}



// Settings for the snapping.
// Mostly standard settings
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 1.0;

    //- Number of mesh displacement relaxation iterations.
	/*
	The higher the value the better the body fitted mesh. 
	The default value is 30. If you are having problems with the mesh quality 
	(related to the snapping step), 
	try to increase this value to 300. 
	Have in mind that this will increase the meshing time.
	*/
    nSolveIter 300;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
	// Increase this value to improve the quality of the body fitted mesh.
    nRelaxIter 10;

    // Feature snapping

        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
	    // Increase this value to improve the quality of the edge features.
        nFeatureSnapIter 10;

        //- Detect (geometric) features by sampling the surface
        implicitFeatureSnap false;

        //- Use castellatedMeshControls::features
        explicitFeatureSnap true;

        //- Detect features between multiple surfaces
        //  (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap true;
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;
	
    // Expansion factor for layer mesh
    expansionRatio 1.1;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // See relativeSizes parameter.
    //minThickness 0.25;
	minThickness 0.05;

    // Per final patch (so not geometry!) the layer information
    layers
    {
	pipeWall
        {
            nSurfaceLayers 3;
			/*
			//Local parameters; 
			//expansionRatio 1.3; 
			//finalLayerThickness 0.3; 
			//minThickness 0.1;
			*/
        }
    }


    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    nGrow 0;


    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 130;
	// wolfdynamics NOTES:
	// Specification of feature angle above which layers are collapsed automatically.
	//featureAngle 130;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    minMedianAxisAngle 90;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;

    // Max number of iterations after which relaxed meshQuality controls
    // get used. Up to nRelaxIter it uses the settings in meshQualityControls,
    // after nRelaxIter it uses the values in meshQualityControls::relaxed.
    nRelaxedIter 20;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"

    // Optional : some meshing phases allow usage of relaxed rules.
    // See e.g. addLayersControls::nRelaxedIter.
    relaxed
    {
        //- Maximum non-orthogonality allowed. Set to 180 to disable.
        maxNonOrtho 75;
    }

    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}

// meshQualityControls
/*
  During the mesh generation process, the mesh quality is continuously monitored.
  The mesher snappyHexMesh will try to generate a mesh 
  using the mesh quality parameters defined by the user.
  If a mesh motion or topology change introduces a poor quality cell or face,
  the motion or topology change is undone to revert the mesh back 
  to a previously valid error free state.
*/
// ---------------------------------------
// This can be done in a seperated file. |
// ---------------------------------------
/*
meshQualityControls
{
	maxNonOrtho 75; 
	maxBoundarySkewness 20; 
	maxInternalSkewness 4; 
	maxConcave 80;
	minVol 1E-13;
	
	//minTetQuality 1e-15;
	minTetQuality -1e+30; 
	
	minArea -1;
	minTwist 0.02; 
	minDeterminant 0.001; 
	minFaceWeight 0.05; 
	minVolRatio 0.01; 
	minTriangleTwist -1; 
	minFlatness 0.5; 
	nSmoothScale 4; 
	errorReduction 0.75;
}
*/


// Advanced

// Write flags
writeFlags
(
    scalarLevels    // write volScalarField with cellLevel for postprocessing
    layerSets       // write cellSets, faceSets of faces in layer
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1E-6;


// ************************************************************************* //
